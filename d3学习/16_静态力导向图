<!DOCTYPE html>
<svg width="1920"
	 height="1080"></svg>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script>
	var svg = d3.select("svg"),
		width = +svg.attr("width"),
		height = +svg.attr("height"),
		g = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

	var n = 4000
	var nodes = [{
		"id": "1",
		"module": 0,
		"i": 0
	}, {
		"id": "3",
		"module": 0,
		"i": 1
	}, {
		"id": "8",
		"module": 2,
		"i": 2
	}, {
		"id": "9",
		"module": 4,
		"i": 3
	}, {
		"id": "12",
		"module": 2,
		"i": 4
	}, {
		"id": "15",
		"module": 2,
		"i": 5
	}, {
		"id": "23",
		"module": 3,
		"i": 6
	}, {
		"id": "26",
		"module": 3,
		"i": 7
	}, {
		"id": "37",
		"module": 10,
		"i": 8
	}, {
		"id": "46",
		"module": 2,
		"i": 9
	}, {
		"id": "2",
		"module": 1,
		"i": 10
	}, {
		"id": "4",
		"module": 2,
		"i": 11
	}, {
		"id": "5",
		"module": 3,
		"i": 12
	}, {
		"id": "6",
		"module": 3,
		"i": 13
	}, {
		"id": "7",
		"module": 1,
		"i": 14
	}, {
		"id": "10",
		"module": 4,
		"i": 15
	}, {
		"id": "11",
		"module": 1,
		"i": 16
	}, {
		"id": "13",
		"module": 1,
		"i": 17
	}, {
		"id": "14",
		"module": 1,
		"i": 18
	}, {
		"id": "16",
		"module": 5,
		"i": 19
	}, {
		"id": "18",
		"module": 1,
		"i": 20
	}, {
		"id": "19",
		"module": 3,
		"i": 21
	}, {
		"id": "20",
		"module": 1,
		"i": 22
	}, {
		"id": "21",
		"module": 6,
		"i": 23
	}, {
		"id": "22",
		"module": 2,
		"i": 24
	}, {
		"id": "25",
		"module": 3,
		"i": 25
	}, {
		"id": "27",
		"module": 1,
		"i": 26
	}, {
		"id": "28",
		"module": 3,
		"i": 27
	}, {
		"id": "29",
		"module": 1,
		"i": 28
	}, {
		"id": "31",
		"module": 2,
		"i": 29
	}, {
		"id": "33",
		"module": 2,
		"i": 30
	}, {
		"id": "34",
		"module": 9,
		"i": 31
	}, {
		"id": "35",
		"module": 1,
		"i": 32
	}, {
		"id": "38",
		"module": 2,
		"i": 33
	}, {
		"id": "41",
		"module": 4,
		"i": 34
	}, {
		"id": "32",
		"module": 2,
		"i": 35
	}, {
		"id": "40",
		"module": 2,
		"i": 36
	}, {
		"id": "17",
		"module": 4,
		"i": 37
	}, {
		"id": "36",
		"module": 3,
		"i": 38
	}, {
		"id": "39",
		"module": 3,
		"i": 39
	}, {
		"id": "44",
		"module": 3,
		"i": 40
	}, {
		"id": "45",
		"module": 3,
		"i": 41
	}, {
		"id": "42",
		"module": 9,
		"i": 42
	}, {
		"id": "43",
		"module": 11,
		"i": 43
	}, {
		"id": "24",
		"module": 7,
		"i": 44
	}, {
		"id": "30",
		"module": 8,
		"i": 45
	}];

	var links = [{
		"source": 0,
		"target": 1
	}, {
		"source": 10,
		"target": 14
	}, {
		"source": 10,
		"target": 16
	}, {
		"source": 10,
		"target": 22
	}, {
		"source": 10,
		"target": 28
	}, {
		"source": 10,
		"target": 32
	}, {
		"source": 11,
		"target": 36
	}, {
		"source": 12,
		"target": 13
	}, {
		"source": 12,
		"target": 21
	}, {
		"source": 12,
		"target": 7
	}, {
		"source": 12,
		"target": 41
	}, {
		"source": 13,
		"target": 25
	}, {
		"source": 13,
		"target": 7
	}, {
		"source": 13,
		"target": 27
	}, {
		"source": 13,
		"target": 38
	}, {
		"source": 13,
		"target": 39
	}, {
		"source": 13,
		"target": 40
	}, {
		"source": 14,
		"target": 10
	}, {
		"source": 14,
		"target": 18
	}, {
		"source": 14,
		"target": 32
	}, {
		"source": 2,
		"target": 29
	}, {
		"source": 2,
		"target": 30
	}, {
		"source": 3,
		"target": 37
	}, {
		"source": 15,
		"target": 3
	}, {
		"source": 15,
		"target": 37
	}, {
		"source": 16,
		"target": 10
	}, {
		"source": 4,
		"target": 24
	}, {
		"source": 4,
		"target": 30
	}, {
		"source": 4,
		"target": 9
	}, {
		"source": 37,
		"target": 15
	}, {
		"source": 20,
		"target": 17
	}, {
		"source": 21,
		"target": 12
	}, {
		"source": 21,
		"target": 13
	}, {
		"source": 21,
		"target": 7
	}, {
		"source": 21,
		"target": 38
	}, {
		"source": 21,
		"target": 39
	}, {
		"source": 21,
		"target": 40
	}, {
		"source": 21,
		"target": 41
	}, {
		"source": 22,
		"target": 17
	}, {
		"source": 24,
		"target": 4
	}, {
		"source": 24,
		"target": 5
	}, {
		"source": 24,
		"target": 30
	}, {
		"source": 24,
		"target": 36
	}, {
		"source": 6,
		"target": 38
	}, {
		"source": 25,
		"target": 13
	}, {
		"source": 7,
		"target": 12
	}, {
		"source": 7,
		"target": 13
	}, {
		"source": 7,
		"target": 21
	}, {
		"source": 7,
		"target": 6
	}, {
		"source": 7,
		"target": 25
	}, {
		"source": 7,
		"target": 38
	}, {
		"source": 7,
		"target": 39
	}, {
		"source": 7,
		"target": 40
	}, {
		"source": 7,
		"target": 41
	}, {
		"source": 26,
		"target": 17
	}, {
		"source": 26,
		"target": 32
	}, {
		"source": 27,
		"target": 13
	}, {
		"source": 29,
		"target": 2
	}, {
		"source": 35,
		"target": 11
	}, {
		"source": 35,
		"target": 36
	}, {
		"source": 30,
		"target": 11
	}, {
		"source": 30,
		"target": 2
	}, {
		"source": 30,
		"target": 4
	}, {
		"source": 30,
		"target": 24
	}, {
		"source": 30,
		"target": 36
	}, {
		"source": 31,
		"target": 42
	}, {
		"source": 38,
		"target": 13
	}, {
		"source": 38,
		"target": 6
	}, {
		"source": 38,
		"target": 7
	}, {
		"source": 38,
		"target": 40
	}, {
		"source": 38,
		"target": 41
	}, {
		"source": 33,
		"target": 24
	}, {
		"source": 39,
		"target": 13
	}, {
		"source": 39,
		"target": 21
	}, {
		"source": 39,
		"target": 41
	}, {
		"source": 36,
		"target": 11
	}, {
		"source": 36,
		"target": 35
	}, {
		"source": 36,
		"target": 30
	}, {
		"source": 34,
		"target": 15
	}, {
		"source": 40,
		"target": 13
	}, {
		"source": 40,
		"target": 21
	}, {
		"source": 41,
		"target": 12
	}, {
		"source": 41,
		"target": 13
	}, {
		"source": 41,
		"target": 7
	}, {
		"source": 41,
		"target": 38
	}, {
		"source": 9,
		"target": 4
	}];

	var simulation = d3.forceSimulation(nodes)
		.force("charge", d3.forceManyBody().strength(-50).distanceMax(250))
		
		.force("link", d3.forceLink(links).distance(50).strength(1).iterations(10))
	// .on("tick", ticked);


	// Use a timeout to allow the rest of the page to load first.
	// d3.timeout(function () {

	// See https://github.com/d3/d3-force/blob/master/README.md#simulation_tick
	for (var i = 0, n = Math.ceil(Math.log(simulation.alphaMin()) / Math.log(1 - simulation.alphaDecay())); i <
		20; ++i) {
		console.log(n)
		simulation.tick();
	}

	var svg_links = g.append("g")
		.attr("stroke", "#000")
		.attr("stroke-width", 1.5)
		.selectAll("line")
		.data(links)
		.enter().append("line")
		.attr("x1", function (d) {
			return d.source.x;
		})
		.attr("y1", function (d) {
			return d.source.y;
		})
		.attr("x2", function (d) {
			return d.target.x;
		})
		.attr("y2", function (d) {
			return d.target.y;
		});

	var svg_nodes = g.append("g")
		.attr("stroke", "#fff")
		.attr("stroke-width", 1.5)
		.selectAll("circle")
		.data(nodes)
		.enter().append("circle")
		.attr("cx", function (d) {
			return d.x;
		})
		.attr("cy", function (d) {
			return d.y;
		})
		.attr("r", 4.5)
		.call(d3.drag().on("start", dragstarted) //d3.drag() 创建一个拖曳行为
			.on("drag", dragged)
			.on("end", dragended));


	function dragstarted(d) {
		if (!d3.event.active) simulation.alphaTarget(0.3).restart(); //alpha是动画的冷却系数，运动过程中会不断减小，直到小于0.005为止，此时动画会停止。
		d.fx = d.x; //fx为固定坐标，x为初始坐标  注3>  
		d.fy = d.y;
	}

	//监听拖拽中  
	function dragged(d) {
		d.fx = d3.event.x; //fevent.x为拖拽移动时的坐标
		d.fy = d3.event.y;
	}

	//监听拖拽结束
	function dragended(d) {
		if (!d3.event.active) simulation.alphaTarget(0);
		// d.fx = null;        //固定坐标清空
		// d.fy = null;
	}

	//拖拽时的事件监听器  以实时更新坐标
	function ticked() {
		svg_links.attr("x1", function (d) {
				return d.source.x;
			})
			.attr("y1", function (d) {
				return d.source.y;
			})
			.attr("x2", function (d) {
				return d.target.x;
			})
			.attr("y2", function (d) {
				return d.target.y;
			});

		svg_nodes.attr("cx", function (d) {
				return d.x;
			})
			.attr("cy", function (d) {
				return d.y;
			});

	}
	// });
</script>
